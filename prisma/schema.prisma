// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}
generator client{
  provider="prisma-client-js"
}
enum UserRole{
  ADMIN
  USER
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  accounts      Account[]
  posts         Post[] 
 isTwoFactorEnabled      Boolean @default(false)
  twoFactorConfiramtion TwoFactorConfirmation?

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Post {
  id  String  @id @default(cuid()) @unique
  User     User? @relation(fields: [UserId],references: [email],onDelete:Cascade )
  firstname      String
  middlename     String?
  lastname       String
  gender         String
  address        String
  province       String
  mobileno       String
  fathername      String
  mothername      String
  birthno         String
  citizenship     String
  dob         String
  married          String
  education String
  caste String
  religion String
  proffession String
  citizenshiptype String
  jaridistrict String
  jaridate String
  applicantdistrict String
  applicantprovince String
  wardno String
  village String
  fmiddle String
  flast String
  mmiddle String
  mlast String
  fnational String
  fcitizen String
  mnational String
  mcitizen String
  spousefname String
  spousemname String
  spouselname String
  spousenational String
  spousecitizen String
  appointmentState String
  appointmentDistrict String
  appointmentDate String
  appointmentLoaction String
  UserId String? 
  img1 String?
  img2 String?
  imgupload Boolean?
  imgApprove Boolean?
  Status Boolean?
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])

}

model TwoFactorConfirmation{
   id String @id @default(cuid())
   userId String
   user User @relation(fields: [userId],references: [id],onDelete: Cascade)

   @@unique([userId])
}

model postImage{
  id String @id @default(cuid())
  imageUrl String
  imageKey String
}